Within the models for users - include the following.  Reference Players model from endemic project

//At the top include this in order to hash the password
// Requiring bcrypt for password hashing. Using the bcryptjs version as the regular bcrypt module sometimes causes errors on Windows machines
var bcrypt = require("bcryptjs");

//After our schema include these functions
  Players.prototype.validPassword = function(password){
    return bcrypt.compareSync(password, this.password);
  };

  Players.addHook("beforeCreate", function(user){
    user.password = bcrypt.hashSync(user.password, bcrypt.genSaltSync(10), null);
  });
  return Players;


  **The landing.js and account.js could have probably been combined rather than having them split

  **In htmlRoute.js - we use the middleware isAuthenticated to ensure our user is already signed in and accessing routes that they are supposed to

  **server.js - we just import and include 3 lines to initialize and utilize passport and express-session



  ///steps and routes for authentication
  /auth/google - goes to OAuth provider(google to obtain permission) -use passport here
  /auth/google/cb - callback route after being granted permission from google - use passport here
  -lookup/create user in mongo in our express app(node)
  -create a unique cookie - app(node) - use passport here
  -browser stores cookie
  -decode cookie & retrieve user info in our express app(node) - use passport here

  auth-routes.js - within routes folder
  const router = require('express').Router();
    router.get("/login", (req, res) => {
        res.render("login")
    });

    //auth logout
    router.get('/logout', (req, res)=>{
        //handle with passport
        res.send('logging out')
    });

    router.get('/google', (req, res) => {
        //handle with passport
        res.send('logging in with google')
    });

    module.exports = router
